import { StandardTableView , HorizontalBox, VerticalBox, ComboBox, Button, GroupBox} from "std-widgets.slint";

export enum AnnouncementModel {
    NotAnnounced,
    PresenceAnnounced,
    RecurringPresenceAnnounced,
}

export struct PersonModel {
    name: string,
    is_self: bool,
    is_present: bool,
    announcements: [AnnouncementModel],
}

export struct SiteModel {
    name: string,
    id: string,
}

component NameDisplay inherits HorizontalLayout {
    in property <PersonModel> person;

    Text {
        horizontal-alignment: left;
        vertical-alignment: center;
        text: person.name;
        font-italic: person.is_self;
    }
}

component PresenceCell inherits VerticalLayout {
    width: 30px;
}

component PresenceHeaderCell inherits PresenceCell {
    in property <string> text;

    Text {
        horizontal-alignment: center;
        text: parent.text;
    }
}

component PresenceItem inherits PresenceCell{
    in property <bool> read_only;
    in property <bool> is_present;
    in-out property <PersonModel> person;
    in property <int> day-offset;
    property <AnnouncementModel> announcement: person.announcements[day-offset];

    callback announcement_change_requested(PersonModel, int);

    TouchArea {
        x: 0;
        width: parent.width;
        Text {
            horizontal-alignment: center;
            text: is-present ? "P" : 
                announcement == AnnouncementModel.PresenceAnnounced ? "A" : 
                announcement == AnnouncementModel.RecurringPresenceAnnounced ? "R" :
                "-"
            ;
        }
        double-clicked => {
            if read_only {
                return;
            }
            // double click switches for recurring announcement
            person.announcements[day-offset] = AnnouncementModel.RecurringPresenceAnnounced;
            announcement_change_requested(person, day-offset);
        }
        clicked => {
            if read_only {
                return;
            }
            // switch between not announced and announcement requested.
            // recurring announcements are also switched to not announced on click
            person.announcements[day-offset] = person.announcements[day-offset] == AnnouncementModel.NotAnnounced 
                ?   AnnouncementModel.PresenceAnnounced
                :   AnnouncementModel.NotAnnounced;
            announcement_change_requested(person, day-offset);
        }
    }
}

component PresenceGrid {
    in property <[PersonModel]> persons;
    in property <int> current_day_index;

    property <[string]> day_names: [@tr("Mo"), @tr("Tu"), @tr("We"), @tr("Th"), @tr("Fr"), @tr("Sa"), @tr("Su")];

    callback announcement_change_requested(PersonModel, int);

    function day_index(day_offset: int) -> int {
        Math.mod(day_offset + current-day-index, 7)
    }

    VerticalLayout {
        HorizontalLayout {
            alignment: end;
            for day_offset in 7: PresenceHeaderCell {
                alignment: end;
                text: day_names[day_index(day_offset)];
            }
        }
        for p in persons: HorizontalLayout {
            NameDisplay {
                person: p;
            }
        
            for day_offset in 7: PresenceItem {
                is_present: day_offset == 0 && p.is_present;
                person: p;
                day-offset: day-offset;
                read_only: !p.is-self;
                announcement_change_requested(p, day-offset) => {
                    root.announcement_change_requested(p, day-offset);
                }
            }
        }
    }
}


export component SitePresenceView inherits Window {

    in property <[PersonModel]> persons: [
        {name: "Uwe Pachler", is-present: true, is_self: true},
        {name: "Horst Cresi", announcements: [
            AnnouncementModel.NotAnnounced, AnnouncementModel.PresenceAnnounced, AnnouncementModel.NotAnnounced, AnnouncementModel.NotAnnounced, AnnouncementModel.RecurringPresenceAnnounced
        ]},
        {name: "Brian NÃ¼rnberg"},
    ];

    in-out property <[SiteModel]> sites: [
        {name: "Stuttgart", id: "stuttgart"},
        {name: "Reutlingen", id: "reutlingen"},
        {name: "Jeverstrasse", id: "jeverstrasse"},
    ];

    in property <[string]> site_names: [
        "Stuttgart",
        "Reutlingen",
        "Jeverstrasse",
    ];

    in property <bool> loading: false;

    in property <int> current_day_index;

    out property <string> selected_site_id;

    callback site_selected(string);
    callback refresh_requested();
    callback announcement_change_requested(string, PersonModel, int);

    out property <string> current_site_id <=> panel.current_site_id;

    panel := VerticalLayout { 
        alignment: start;

        out property <string> current_site_id <=> top_bar.current_site_id;
        
        top_bar := HorizontalLayout {

            out property <string> current_site_id <=> site_combo.current_site_id;

            site_combo := ComboBox {

                out property <string> current_site_id;
    
                function get_current_site_id() -> string {
                    self.current-index >= 0 ? sites[self.current-index].id : ""
                } 
    
                model: site_names;
                selected(name) => {
                    self.current_site_id = get_current_site_id();
                    root.site_selected(get_current_site_id())
                }
            }

            Button {
                icon: @image-url("icons/reload.png");
                clicked => {
                    root.refresh_requested();
                }
            }
        }


        if persons.length > 0:
            PresenceGrid {
                // example data; this will have to be set in code later
                current-day-index: root.current_day_index;
                persons: persons;
                announcement_change_requested(p,n) => {
                    announcement_change_requested(current_site_id, p,n);
                }
            }
        
        if persons.length == 0:
            Text{
                text: @tr("No people registered at site");
                horizontal-alignment: center;
            }
    } 
}