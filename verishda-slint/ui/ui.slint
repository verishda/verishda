import { CheckBox , TextEdit, VerticalBox, HorizontalBox, Button, LineEdit, ProgressIndicator, StyleMetrics, Palette, GridBox } from "std-widgets.slint";

import { SitePresenceView, SiteModel, PersonModel, SettingsModel, SettingsButton } from "mainview.slint";

enum MainWindowState {
    Startup,
    ShowingWelcomeView,
    ShowingSitePresenceView,
    ShowingWaitingForLoginView,
    ShowingSettings,
}

export global AppUI {
    pure callback login_triggered();
    pure callback login_cancelled();
    pure callback site_selected(string);
    pure callback change_favorite_requested(string, bool);
    pure callback refresh_requested();
    pure callback filter_set(string, bool);
    pure callback announcement_change_requested(string, PersonModel, int);
    pure callback apply_settings_requested(SettingsModel);

    in-out property <MainWindowState> state: MainWindowState.ShowingSettings;
    in property <MainWindowState> settings_origin_state: MainWindowState.ShowingSettings;
    in-out property <[SiteModel]> sites;
    in-out property <int> selected_site_index;
    in property <[string]> site_names;
    in property <[PersonModel]> persons;
    in property <SettingsModel> settings;
    in property <int> current_day_index;
}


component FetchProviderMetaView {
    VerticalBox {
        Text {
            text: "Fetching provider metadata...";
        }
        ProgressIndicator {
            height: 20px;
            indeterminate: true;
        }
    }
}
component WelcomeView inherits VerticalBox {

    vertical-stretch: 0;


    VerticalLayout {
        vertical-stretch: 1;
        HorizontalLayout {
            Image {
                colorize: Palette.color-scheme == ColorScheme.dark ? white : black;
                source: @image-url("logo-wide.svg");
                horizontal-alignment: center;
            }
            
        }

        VerticalLayout {
            padding: 16px;
            spacing: 16px;
            vertical-stretch: 1;
            alignment: center;
            Text {
                text: "Tell your colleagues when you are in the office!";
                wrap: word-wrap;
            }
            
            HorizontalBox {
                Button {
                    text: "Login / Create Account";
                    clicked => {
                        AppUI.login-triggered();
                    }
                    horizontal-stretch: 1;
                }
                SettingsButton { 
                    clicked => {
                        AppUI.settings_origin_state = AppUI.state;
                        AppUI.state = MainWindowState.ShowingSettings;        
                    }
                }
            }
        }
    }
}

component SettingsView {
    
    vertical-stretch: 0;
    VerticalBox {
        if AppUI.settings.run-on-startup-supported:
            run-on-startup-checkbox := CheckBox {
                text: "Run Verishda on Login";
                checked: AppUI.settings.run-on-startup;
                toggled => {
                    AppUI.settings.run-on-startup = self.checked;
                    AppUI.apply_settings_requested(AppUI.settings);
                }
            }

        HorizontalBox {
            Button {
                text: "Log out of current session";
                vertical-stretch: 0;
                enabled: AppUI.settings.is-logged-in;
            }
            vertical-stretch: 0;
        }

        
        HorizontalBox {
            vertical-stretch: 1;
            GridBox {}
        }
        HorizontalBox {

            Button {
                horizontal-stretch: 0;
                vertical-stretch: 0;
                text: "Close";
                clicked => {
                    AppUI.state = AppUI.settings_origin_state;
                }
            }
            Text {
                font-size: 8px;
                text: AppUI.settings.software-version;
                horizontal-stretch: 1;
                vertical-stretch: 1;
                vertical-alignment: TextVerticalAlignment.center;
                horizontal-alignment: TextHorizontalAlignment.right;
            }
        }
    }
}

component WaitingForLoginView {
    VerticalBox {
        Text {
            text: "Waiting for login...";
        }
        Button {
            text: "Cancel";
            clicked => {
                AppUI.login-cancelled();
            }
        }
    }
}

export component MainWindow inherits Window {
    title: "Verishda";
    vertical-stretch: 1;
    default-font-size: 14px;
    if AppUI.state == MainWindowState.Startup: 
        fetch_view := FetchProviderMetaView {}

    if AppUI.state == MainWindowState.ShowingWelcomeView:
        welcome_view := WelcomeView {
            y: 0px;
            width: root.width;
            vertical-stretch: 1;
        }
    
    if AppUI.state == MainWindowState.ShowingSettings:
        settings_view := SettingsView {
            width: root.width;
            height: root.height;
        }

    if AppUI.state == MainWindowState.ShowingWaitingForLoginView:
        waiting_for_login_view := WaitingForLoginView {}
        
    if AppUI.state == MainWindowState.ShowingSitePresenceView: 
        site_presence_view := SitePresenceView {
            width: root.width;
            sites <=> AppUI.sites;
            selected_site_index <=> AppUI.selected_site_index;
            site_names <=> AppUI.site_names;
            persons <=> AppUI.persons;
            site_selected(site_id) => {
                AppUI.site_selected(site_id);
            }
            refresh_requested() => {
                AppUI.refresh_requested();
            }
            favorite_change_requested(user_id, favorite) => {
                AppUI.change_favorite_requested(user_id, favorite);
            }
            announcement_change_requested(site_id, person, day_index) => {
                AppUI.announcement_change_requested(site_id, person, day_index);
            }
            filter_set(term, favorites-only) => {
                AppUI.filter_set(term, favorites-only);
            }
            show_settings_requested() => {
                AppUI.settings_origin_state = AppUI.state;
                AppUI.state = MainWindowState.ShowingSettings;        
            }
            current_day_index: AppUI.current_day_index;
        }

    
}